package mycomposer;

import java.util.InputMismatchException;
import java.util.Scanner;
import mycomposer.model.Layer;
import mycomposer.model.LayerColor;
import mycomposer.model.Song;
import mycomposer.model.SongImpl;
import mycomposer.model.unit.Drum;
import mycomposer.model.unit.Note;
import mycomposer.model.unit.Pitch;
import mycomposer.model.unit.Unit;

/**
 * Allows the user to read in a song from a properly formatted song file (such as the ones generated
 * by this program) or other properly formatted input source.
 */
public final class SongReader {

  private static int layerNum;
  private static Song song;

  /**
   * Generates a song from a properly formatted song input source.
   *
   * @param readable the input source containing the properly formatted song information
   * @return a song with the data specified from the given input source
   * @throws IllegalStateException    if there is unexpected input
   * @throws IllegalArgumentException if the song data is invalid (such as a unit with a start beat
   *                                  after its end beat)
   */
  public static Song readSongFile(Readable readable)
      throws IllegalStateException, IllegalArgumentException {
    Scanner scan = new Scanner(readable);

    song = new SongImpl();
    layerNum = -1;

    while (scan.hasNext()) {
      switch (scan.next()) {
        case "tempo":
          song.setTempo(scan.nextInt());
          break;
        case "*layer":
          readLayer(scan, true);
          break;
        case "layer":
          readLayer(scan, false);
          break;
        case "--------------------------":
          scan.nextLine();
          scan.nextLine();
          layerNum++;
          break;
        case "note":
          readUnit(scan, true);
          break;
        case "drum":
          readUnit(scan, false);
          break;
        default:
          scan.nextLine();
      }
    }

    scan.close();
    return song;
  }

  /**
   * Generates a layer specified by the input and adds it to the song.
   *
   * @param scan a scanner containing the input source of the song
   * @param mute whether or not the layer to be added should be muted
   * @throws IllegalStateException    if there is unexpected input in the input source
   * @throws IllegalArgumentException if the layer generated from the input is invalid
   */
  private static void readLayer(Scanner scan, boolean mute)
      throws IllegalStateException, IllegalArgumentException {
    String color;
    int volume;
    String restOfLine;

    if (scan.hasNext()) {
      color = scan.next();
    } else {
      throw new IllegalStateException("Expected color, no color available");
    }

    if (scan.hasNextInt()) {
      volume = scan.nextInt();
    } else {
      throw new IllegalStateException("Expected volume, no volume available");
    }

    if (scan.hasNextLine()) {
      restOfLine = scan.nextLine();
    } else {
      throw new IllegalStateException("Expected layer name, no layer name available");
    }

    String[] words = restOfLine.split("\\s+");

    StringBuilder builder = new StringBuilder();

    for (int i = 0; i < words.length - 1; i++) {
      builder.append(words[i]).append(" ");
    }

    builder.append(words[words.length - 1]);

    String layerName = builder.toString().trim();

    Layer layer = new Layer(layerName, volume, LayerColor.valueOf(color), mute);

    song.addLayer(layer);
  }

  /**
   * Generates a unit specified by the input and adds it to the song in the current layer.
   *
   * @param scan a scanner containing the input source of the song
   * @param note true if the unit to read is a note, false if the unit to read is a drum beat
   * @throws IllegalStateException    if there is unexpected input in the input source
   * @throws IllegalArgumentException if the unit generated by the input is invalid
   */
  private static void readUnit(Scanner scan, boolean note)
      throws IllegalArgumentException, IllegalStateException {
    int[] properties = new int[4];

    for (int i = 0; i < 3; i++) {
      try {
        properties[i] = scan.nextInt();
      } catch (InputMismatchException ime) {
        throw new IllegalStateException("Invalid property");
      }
    }

    int start = properties[0];
    int end = properties[1];
    int instrument = properties[2];

    if (note) {
      String pitchName;
      int octave;

      if (scan.hasNext()) {
        pitchName = scan.next();
      } else {
        throw new IllegalStateException("Expected pitch, no pitch available");
      }

      if (scan.hasNextInt()) {
        octave = scan.nextInt();
      } else {
        throw new IllegalStateException("Expected octave, no octave available");
      }

      Pitch pitch = Pitch.valueOf(pitchName);

      readNote(start, end, instrument, pitch, octave);
    } else {
      readDrum(start, end, instrument);
    }
  }

  /**
   * Generates a note specified by the input and given properties and adds it to the song in the
   * current layer.
   *
   * @param start      the start beat of the note
   * @param end        the end beat of the note
   * @param instrument the MIDI index representing the instrument of the note
   * @param pitch      the pitch of the note
   * @param octave     the octave of the note
   * @throws IllegalArgumentException if the note is invalid
   */
  private static void readNote(int start, int end, int instrument, Pitch pitch, int octave)
      throws IllegalArgumentException {
    // Format:
    //      start end instrument pitch octave
    // note 0     2   30         D     3

    Unit note = new Note(start, end, instrument, pitch, octave);
    song.getLayers().get(layerNum).addUnit(note);
  }

  /**
   * Generates a drum beat specified by the input and given properties and adds it to the song in
   * the current layer.
   *
   * @param start      the start beat of the note
   * @param end        the end beat of the note
   * @param instrument the MIDI index representing the instrument of the note
   * @throws IllegalArgumentException if the drum beat is invalid
   */
  private static void readDrum(int start, int end, int instrument)
      throws IllegalArgumentException {
    // Format:
    //      start end instrument
    // drum 1     2   48

    Unit drum = new Drum(start, end, instrument);
    song.getLayers().get(layerNum).addUnit(drum);
  }
}
